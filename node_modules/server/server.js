// variable

/**
* loading express module
*/
var express = require('express');
/**
* initialisation of express
*/
var	app = express();
/**
* http server creation
*/
var server = require('http').createServer(app);
/**
*	loading ent module
*/
var ent = require('ent');
/**
*	loading io module and bind socket on the server
*/
var io = require('socket.io').listen(server);
/**
*	loading crypto module
*/
var crypto = require('crypto');
/**
* client list
*/
var client = [];
/**
* active socket list
*/
var listSocket = [];


/**
* return true if id and password are valid
* @param {String} client id
* @param {String} client password
* @return {Boolean} true if password and id are valid
*/
function verif(pseudo, password) {
	return ((pseudo!=undefined && pseudo!=null && pseudo!="") && (password!=undefined && password!=null && password!=""));
}

/**
* return the index of a pseudo in client array
* @param {String} client pseudo
* @return {Integer} index of the pseudo in client array or -1
*/
function indexOf(pseudo) {
	var index = -1;
	client.forEach( function (val, i) {
		if (pseudo === val.pseudo) {
			index = i;
		}
	});
	return index;
}

/**
* remove a client with his pseudo
* @param {String} client pseudo to remove
* @return {Boolean} true if the client has been deleted
*/
function remove(pseudo) {
	var index = indexOf(pseudo);
	if (index !== -1) {
		client.splice(index, 1);
		return true;
	}
	return false;
}

/**
* initialize the express application
*/
function initApp() {
	// app
	app.use('/views', express.static(__dirname + '/../../views'));
	app.use('/dist', express.static(__dirname + '/../../views/dist'));
	app.use('/css', express.static(__dirname + '/../../views/perso/css'));
	app.use('/js', express.static(__dirname + '/../../views/perso/js'));
	app.use(express.bodyParser());

	app.get("/", function (req, res) {
		res.render('home.ejs');
	});

	app.post("/game", function (req, res) {
		console.log("game");
		var pseudo = req.body.pseudo;
		var password = req.body.psw;
		var p = crypto.createHash('md5').update(password).digest("hex");

		if (verif(pseudo, password)) {
			res.render('game.ejs', {pseudo: pseudo, password: p});
		}
		else {
			res.render('home.ejs');
		}	
	});
}

/**
* initialize the server webSocket
*/
function initSocket () {
	// io
	io.sockets.on('connection', function (socket, pseudo, status) {
		listSocket.push(socket);
		console.log("connection");

		// client chat interface
		// client connection
		socket.on('connect_client', function(pseudo) {
			var pseudo = ent.encode(pseudo);
    		socket.set('pseudo', pseudo);
    		client.push( {pseudo: pseudo, status: 'online'} );
    		socket.emit('new_client_connected', client);
    		socket.broadcast.emit('new_client_connected', client);
		});

		// client disconnection
		socket.on('disconnect', function() {
			socket.get('pseudo', function (error, pseudo) {
				remove(pseudo);
    	        socket.broadcast.emit('client_disconnect', client);
    	    });
		});

		// status changed
		socket.on('statusChanged', function(status) {
			socket.get('pseudo', function (error, pseudo) {
				client[indexOf(pseudo)].status = status;
				socket.emit('status', {pseudo: pseudo, status: status});
    	        socket.broadcast.emit('status', {pseudo: pseudo, status: status});
    	    });		
		})

		// client message chat
		socket.on('sendMessage', function(msg) {
			socket.get('pseudo', function (error, pseudo) {
				listSocket.forEach(function (val) {
					val.get('pseudo', function (error, destPseudo) {
						var dest = msg.dest.replace("#AUTO_CHATFORM_", "");
						if (destPseudo == dest) {
							console.log("passage dans le if");
							msg.author = pseudo;
							val.emit('msg', {msg: msg});
						}
					});
				});
			});
		});
		/* ... */

		// client game

		/* ... */
	});
}

/**
* function call to start the server. She initialize app, socket and she launch the serveur
*/
exports.start = function () {
	initApp();
	initSocket();
	server.listen(8080);
}
